삽입 정렬 ( Insertion Sort ) 란?
: 삽입 정렬은 두 번째 인덱스부터 시작한다.
: 해당 인덱스(key 값) 앞에 있는 데이터부터 비교해서 key값이 더 작으면, 데이터 값을 뒤 인덱스로 복사한다.
: 이를 key 값이 더 큰 데이터를 만날때까지 반복하고 큰 데이터를 만난 위치 바로 뒤에 key값을 이동한다.

list의 요소가 n개 있는 경우
: (n-1) 턴이 이뤄진다.
1번째 턴 : 2번째 인덱스와 1번째 인덱스를 비교해서 swap 여부 결정
2번째 턴 : 3번째 인덱스 기준 2번째 인덱스와 먼저 비교후 swap 결정,
만약 2번째 인덱스에서 swap이 일어난 경우 1번째 인덱스와 비교 후 swap 여부 결정
3번째 턴 : 4번째 인덱스 기준 ....

시간 복잡도 ?
: O(n^2)
: 최악의 경우 n*(n-1) / 2
: 최선의 경우 O(n) - 완전 정렬이 되어있는 경우



방법 1) - while + shift
특징: 비교 중 요소를 한 번만 복사해두고, 이동은 shift로 처리
장점: swap보다 덜 느림, 실전에서도 더 선호되는 방식
가독성도 유지되면서 성능도 더 낫다

방법 2) - for + swap
특징: 요소를 매번 swap()으로 교환해서 정렬 위치로 보냄
단점: swap 연산은 실제로는 3번의 대입이 일어나서 비용이 크다
예: a, b = b, a는 내부적으로 temp 변수 써서 3번 움직임
장점: 코드가 직관적이고 간단함

블로그 ) https://blog.naver.com/PostView.naver?blogId=dancing_nani&logNo=223834219497&categoryNo=87&parentCategoryNo=0&viewDate=&currentPage=1&postListTopCurrentPage=1&from=postView&userTopListOpen=true&userTopListCount=5&userTopListManageOpen=false&userTopListCurrentPage=1